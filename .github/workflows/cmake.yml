name: C++ CI

on:
  push:
    branches: ['**']
    tags: ['**']
  workflow_dispatch:
    inputs:
      build_type:
        description: Build type
        required: false
        default: 'Debug'
        type: choice
        options:
          - Debug
          - Release
          - RelWithDebInfo
          - MinSizeRel

env:
  BUILD_TYPE: ${{ inputs.build_type || 'Debug' }}
  EXECUTABLE_NAME: "Aether"
  INPUT_FILENAME: "tastatura.txt"
  BIN_DIR: "bin"
  BUILD_DIR: "build"
  EXT_DIR: "ext"
  GEN_DIR: "generated"

defaults:
  run:
    shell: bash

jobs:
  cppcheck:
    name: "Cppcheck"
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    env:
      CPPCHECK_VER: "2.14.2"
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Run cppcheck
        uses: ./.github/actions/cppcheck

  clang-tidy:
    name: "Clang-Tidy"
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    env:
      CLANG_VER: 18
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install X11 + OpenGL (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            xorg-dev \
            libsfml-dev \
            libx11-dev \
            libxrandr-dev \
            libxcursor-dev \
            libxi-dev \
            libxinerama-dev \
            libxext-dev \
            libgl1-mesa-dev \
            libglu1-mesa-dev \
            libasound2-dev \
            libpulse-dev \
            libvorbis-dev \
            libogg-dev \
            libflac-dev \
            libudev-dev \
            xvfb \
            libxcb1-dev \
            libxcb-randr0-dev \
            libxcb-xfixes0-dev \
            libxcb-cursor-dev \
            libxcb-keysyms1-dev \
            libxcb-icccm4-dev \
            libxcb-image0-dev \
            libxcb-render-util0-dev \
            libxcb-xkb-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libx11-xcb-dev \
            libxcb-dri2-0-dev \
            libxcb-dri3-dev \
            libxcb-present-dev \
            libxcb-sync-dev \
            libxcb-glx0-dev \
            libxcb-shape0-dev \
            libxcb-xinput-dev \
            libxcb-util0-dev \
            libxcb-xinerama0-dev \
            libxcb-ewmh-dev \
            libxcb-composite0-dev \
            libxcb-damage0-dev \
            libxcb-record0-dev \
            libxcb-res0-dev \
            libxcb-screensaver0-dev \
            libxcb-xevie-dev

      - name: Setup Xvfb
        if: runner.os == 'Linux'
        run: |
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          echo "DISPLAY=:99" >> $GITHUB_ENV  
      

      - name: Run clang-tidy
        uses: ./.github/actions/clang-tidy

  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 8
    permissions:
      attestations: write
      contents: write
      id-token: write

    env:
      CC: ${{ matrix.c }}
      CXX: ${{ matrix.cxx }}
      VSCMD_SKIP_SENDTELEMETRY: 1
      MINGW_VER: "13.3.0posix-11.0.1-msvcrt-r1/winlibs-x86_64-posix-seh-gcc-13.3.0-mingw-w64msvcrt-11.0.1-r1.7z"

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            c: clang-18
            cxx: clang++-18
            clang_ver: "18"
            clang_ver_full: "18.1.8"
            name: "MSan: Ubuntu 22.04 Clang 18"
            cmake_flags: "-DUSE_MSAN=ON"
            cmake_generator: Ninja
            runs_msan: true

          - os: ubuntu-22.04
            c: gcc-12
            cxx: g++-12
            name: "ASan: Ubuntu 22.04 GCC 12"
            cmake_flags: "-DUSE_ASAN=ON"
            cmake_generator: Ninja
            runs_asan: true
            asan_name: "-asan"

          - os: macos-14
            c: clang
            cxx: clang++
            name: "macOS 14 Apple Clang 15"
            cmake_flags: "-DUSE_ASAN=OFF"
            runs_asan: false

          - os: macos-14
            c: clang
            cxx: clang++
            name: "macOS 14 Clang"

          - os: windows-2022
            c: cl
            cxx: cl
            name: "ASan: Windows 2022 MSVC 19.43"
            cmake_flags: "-DUSE_ASAN=ON"
            runs_asan: true

          - os: windows-2022
            c: gcc
            cxx: g++
            name: "Windows 2022 MinGW GCC 13"
            cmake_generator: Ninja

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install X11 + OpenGL (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            xorg-dev \
            libsfml-dev \
            libx11-dev \
            libxrandr-dev \
            libxcursor-dev \
            libxi-dev \
            libxinerama-dev \
            libxext-dev \
            libgl1-mesa-dev \
            libglu1-mesa-dev \
            libasound2-dev \
            libpulse-dev \
            libvorbis-dev \
            libogg-dev \
            libflac-dev \
            libudev-dev \
            xvfb \
            libxcb1-dev \
            libxcb-randr0-dev \
            libxcb-xfixes0-dev \
            libxcb-cursor-dev \
            libxcb-keysyms1-dev \
            libxcb-icccm4-dev \
            libxcb-image0-dev \
            libxcb-render-util0-dev \
            libxcb-xkb-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libx11-xcb-dev \
            libxcb-dri2-0-dev \
            libxcb-dri3-dev \
            libxcb-present-dev \
            libxcb-sync-dev \
            libxcb-glx0-dev \
            libxcb-shape0-dev \
            libxcb-xinput-dev \
            libxcb-util0-dev \
            libxcb-xinerama0-dev \
            libxcb-ewmh-dev \
            libxcb-composite0-dev \
            libxcb-damage0-dev \
            libxcb-record0-dev \
            libxcb-res0-dev \
            libxcb-screensaver0-dev \
            libxcb-xevie-dev

      - name: Setup Xvfb
        if: runner.os == 'Linux'
        run: |
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          echo "DISPLAY=:99" >> $GITHUB_ENV

      - name: Set timestamp, zip name, repo visibility
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "TIMESTAMP=$(date +%Y-%m-%d-%H-%M-%S)" >> ${GITHUB_ENV}
          echo "ZIP_NAME=$(echo "${GITHUB_REPOSITORY}_${{ env.BUILD_TYPE }}_${{ matrix.os }}_${{ matrix.cxx }}${{ matrix.asan_name }}" | sed 's|/|_|')" >> ${GITHUB_ENV}
          if [[ $(gh repo view "${{ github.repository }}" --json isPrivate -q ".isPrivate") == "true" ]]; then
              echo "PRIVATE_REPO=true" >> ${GITHUB_ENV}
          else
              echo "Public repo"
          fi

      - name: Install packages
        uses: ./.github/actions/install-packages

      - name: Configure CMake
        uses: ./.github/actions/configure-cmake
        with:
          custom_flags: ${{ matrix.cmake_flags }}
          warnings_as_errors: 'ON'

      - name: Build
        run: |
          bash ./scripts/cmake.sh build -c ${{ env.BUILD_TYPE }}

      - name: Install
        run: |
          bash ./scripts/cmake.sh install -c ${{ env.BUILD_TYPE }} -i artifacts

      - name: Move artifacts
        run: |
          mkdir ${{ env.ZIP_NAME }}
          shopt -s dotglob
          mv artifacts/${{ env.BIN_DIR }}/* ${{ env.ZIP_NAME }}
          ls -la ${{ env.ZIP_NAME }}

      - name: Process artifacts
        uses: ./.github/actions/process-artifacts

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Aether-${{ github.run_id }}
          path: |
              {{ github.workspace }}/build/${{ matrix.build_type }}/${{ matrix.compiler }}/${{ matrix.os }}/${{ matrix.arch }}/${{ env.EXECUTABLE_NAME }}

      - name: Runtime checks
        uses: ./.github/actions/runtime-checks

      - name: Create release
        uses: ./.github/actions/create-release
        if: startsWith(github.ref, 'refs/tags/')